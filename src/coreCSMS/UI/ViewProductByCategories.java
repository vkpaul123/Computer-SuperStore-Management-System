/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coreCSMS.UI;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author hp-pc
 */
public class ViewProductByCategories extends javax.swing.JInternalFrame {

    public NewMDIApplication mdiObj = null;
    
    /**
     * Creates new form ViewProductByCategories
     */
    public ViewProductByCategories(NewMDIApplication mdiObj) {
        this.mdiObj = mdiObj;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        imagePanelLogo = new coreCSMS.UI.ImagePanel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPaneCategory = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMotherboards = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableProcessors = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableProcessorHeatSinks = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableRAMs = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableGraphicsCards = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableSoundCards = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableHardDiskDrives = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableOpticalDrives = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTablePSUs = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableChassis = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableMonitors = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTableKeyboards = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTableMice = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTableHeadphones = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTableSpeakers = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTablePrinterAndInks = new javax.swing.JTable();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTableOtherAccessories = new javax.swing.JTable();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTableLaptops = new javax.swing.JTable();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTableDesktops = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txtSearchBrand = new javax.swing.JTextField();
        txtSearchModel = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("View Products (By Categories)");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel2.setBackground(java.awt.SystemColor.controlShadow);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.SystemColor.activeCaptionText));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Icons/New Icons/IconsPNG/ViewProducts.png"))); // NOI18N

        jSeparator2.setBackground(java.awt.SystemColor.desktop);
        jSeparator2.setForeground(java.awt.SystemColor.controlLtHighlight);
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout imagePanelLogoLayout = new javax.swing.GroupLayout(imagePanelLogo);
        imagePanelLogo.setLayout(imagePanelLogoLayout);
        imagePanelLogoLayout.setHorizontalGroup(
            imagePanelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 108, Short.MAX_VALUE)
        );
        imagePanelLogoLayout.setVerticalGroup(
            imagePanelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("VIEW PRODUCTS (BY CATEGORIES)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 679, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePanelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(imagePanelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTableMotherboards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableMotherboards);

        jTabbedPaneCategory.addTab("Motherboards", jScrollPane2);

        jTableProcessors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableProcessors);

        jTabbedPaneCategory.addTab("Processors", jScrollPane3);

        jTableProcessorHeatSinks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableProcessorHeatSinks);

        jTabbedPaneCategory.addTab("Processor Heat-Sinks", jScrollPane4);

        jTableRAMs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTableRAMs);

        jTabbedPaneCategory.addTab("RAMs", jScrollPane5);

        jTableGraphicsCards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableGraphicsCards);

        jTabbedPaneCategory.addTab("Graphics Cards", jScrollPane6);

        jTableSoundCards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableSoundCards);

        jTabbedPaneCategory.addTab("Sound Cards", jScrollPane7);

        jTableHardDiskDrives.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHardDiskDrives.setToolTipText("");
        jScrollPane8.setViewportView(jTableHardDiskDrives);

        jTabbedPaneCategory.addTab("Hard-Disk Drives", jScrollPane8);

        jTableOpticalDrives.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTableOpticalDrives);

        jTabbedPaneCategory.addTab("Optical Drives", jScrollPane9);

        jTablePSUs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTablePSUs);

        jTabbedPaneCategory.addTab("Power Supply Units", jScrollPane10);

        jTableChassis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTableChassis);

        jTabbedPaneCategory.addTab("Chassis", jScrollPane11);

        jTableMonitors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(jTableMonitors);

        jTabbedPaneCategory.addTab("Monitors", jScrollPane12);

        jTableKeyboards.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTableKeyboards);

        jTabbedPaneCategory.addTab("Keyboards", jScrollPane13);

        jTableMice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane14.setViewportView(jTableMice);

        jTabbedPaneCategory.addTab("Mice", jScrollPane14);

        jTableHeadphones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane15.setViewportView(jTableHeadphones);

        jTabbedPaneCategory.addTab("Headphones", jScrollPane15);

        jTableSpeakers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane16.setViewportView(jTableSpeakers);

        jTabbedPaneCategory.addTab("Speakers", jScrollPane16);

        jTablePrinterAndInks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane17.setViewportView(jTablePrinterAndInks);

        jTabbedPaneCategory.addTab("Printers and Inks", jScrollPane17);

        jTableOtherAccessories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane18.setViewportView(jTableOtherAccessories);

        jTabbedPaneCategory.addTab("Other Accessories", jScrollPane18);

        jTableLaptops.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane19.setViewportView(jTableLaptops);

        jTabbedPaneCategory.addTab("Laptops", jScrollPane19);

        jTableDesktops.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PRODUCT ID", "PRODUCT BRAND", "PRODUCT MODEL", "PRODUCT DESCRIPTION", "PRODUCT PRICE", "PRODUCT QUANTITY IN STOCK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane20.setViewportView(jTableDesktops);

        jTabbedPaneCategory.addTab("Desktops", jScrollPane20);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Icons/New Icons/IconsPNG/1456622100_eye.png"))); // NOI18N
        jButton1.setText("View Product...");
        jButton1.setToolTipText("View Product...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Icons/New Icons/IconsPNG/1457686460_arrow-refresh.png"))); // NOI18N
        jButton2.setText("Refresh");
        jButton2.setToolTipText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtSearchBrand.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtSearchBrand.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchBrandFocusGained(evt);
            }
        });

        txtSearchModel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtSearchModel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchModelFocusGained(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Icons/New Icons/IconsPNG/1458091263_xmag.png"))); // NOI18N
        jButton3.setText("Search");
        jButton3.setToolTipText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Search Product Brand:");

        jLabel4.setText("Search Product Model:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPaneCategory)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtSearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPaneCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void selectProductCategoryTab(int tabIndex)   {
        jTabbedPaneCategory.setSelectedIndex(tabIndex);
        
        for(int x=0; x<20; x++)  {
        
        switch(x)    {
            case 0:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Motherboards' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableMotherboards.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 1:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processors' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableProcessors.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 2:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processor Heat Sinks' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableProcessorHeatSinks.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 3:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='RAMs' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableRAMs.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 4:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Graphic Cards' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableGraphicsCards.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 5:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Sound Cards' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableSoundCards.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                                
                break;
            case 6:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Hard Disk Drives' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableHardDiskDrives.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}                
                
                break;
            case 7:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Optical Drives' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableOpticalDrives.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 8:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Power Supply Units' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTablePSUs.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 9:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Chassis' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableChassis.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 10:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Monitors' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableMonitors.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 11:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Keyboards' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableKeyboards.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 12:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Mice' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableMice.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 13:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Headphones' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableHeadphones.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 14:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Speakers' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableSpeakers.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 15:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Printers and Inks' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTablePrinterAndInks.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 16:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Other Accessories' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableOtherAccessories.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 17:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Laptops' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableLaptops.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
            case 18:
                try {
                    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                    Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Desktops' order by product_id");
                    ResultSetMetaData rsMeta = rs.getMetaData();
                    rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                    int columnCount = rsMeta.getColumnCount();
                    DefaultTableModel tableModel = (DefaultTableModel) jTableDesktops.getModel();
                    
                    tableModel.setRowCount(0);
                    while(rs.next())    {
                        String[] conList = new String[columnCount];
                        for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                            conList[j] = rs.getString(i);
                        }
                        tableModel.addRow(conList);
                    }
                    rs.close();
                    st.close();
                    con.close();
                    
                }
                catch(ClassNotFoundException cnfe) {}
                catch(SQLException sqle)    {}
                
                break;
        }
        }
    }
    public void refreshTableTabs()  {
        selectProductCategoryTab(jTabbedPaneCategory.getSelectedIndex());
    }
    
    public void searchProduct() {
        refreshTableTabs();
        
        switch(jTabbedPaneCategory.getSelectedIndex())  {
            
            case 0:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Motherboards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMotherboards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Motherboards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMotherboards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Motherboards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMotherboards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Motherboards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMotherboards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 1:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processors' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableProcessors.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processors' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableProcessors.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processors' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableProcessors.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processors' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableProcessors.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 2:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processor Heat Sinks' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableProcessorHeatSinks.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processor Heat Sinks' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableProcessorHeatSinks.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processor Heat Sinks' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableProcessorHeatSinks.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Processor Heat Sinks' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableProcessorHeatSinks.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 3:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='RAMs' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableRAMs.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='RAMs' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableRAMs.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='RAMs' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableRAMs.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='RAMs' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableRAMs.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 4:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Graphic Cards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableGraphicsCards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Graphic Cards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableGraphicsCards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Graphic Cards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableGraphicsCards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Graphic Cards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableGraphicsCards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 5:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Sound Cards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableSoundCards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Sound Cards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableSoundCards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Sound Cards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableSoundCards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Sound Cards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableSoundCards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 6:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Hard Disk Drives' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableHardDiskDrives.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Hard Disk Drives' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableHardDiskDrives.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Hard Disk Drives' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableHardDiskDrives.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Hard Disk Drives' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableHardDiskDrives.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 7:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Optical Drives' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableOpticalDrives.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Optical Drives' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableOpticalDrives.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Optical Drives' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableOpticalDrives.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Optical Drives' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableOpticalDrives.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 8:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Power Supply Units' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTablePSUs.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Power Supply Units' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTablePSUs.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Power Supply Units' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTablePSUs.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Power Supply Units' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTablePSUs.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 9:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Chassis' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableChassis.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Chassis' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableChassis.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Chassis' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableChassis.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Chassis' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableChassis.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 10:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Monitors' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMonitors.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Monitors' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMonitors.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Monitors' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMonitors.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Monitors' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMonitors.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 11:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Keyboards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableKeyboards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Keyboards' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableKeyboards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Keyboards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableKeyboards.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Keyboards' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableKeyboards.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 12:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Mice' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMice.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Mice' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMice.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Mice' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableMice.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Mice' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableMice.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 13:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Headphones' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableHeadphones.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Headphones' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableHeadphones.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Headphones' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableHeadphones.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Headphones' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableHeadphones.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 14:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Speakers' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableSpeakers.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Speakers' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableSpeakers.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Speakers' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableSpeakers.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Speakers' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableSpeakers.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 15:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Printers and Inks' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTablePrinterAndInks.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Printers and Inks' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTablePrinterAndInks.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Printers and Inks' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTablePrinterAndInks.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Printers and Inks' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTablePrinterAndInks.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 16:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Other Accessories' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableOtherAccessories.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Other Accessories' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableOtherAccessories.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Other Accessories' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableOtherAccessories.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Other Accessories' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableOtherAccessories.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 17:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Laptops' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableLaptops.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Laptops' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableLaptops.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Laptops' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableLaptops.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Laptops' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableLaptops.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
            
            case 18:
                if(txtSearchBrand.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Desktops' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableDesktops.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Desktops' and product_brand LIKE '%" + txtSearchBrand.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableDesktops.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {}                    
                }
                else if(txtSearchModel.getText().length()!=0)   {
                    try {
                        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                        Connection con = DriverManager.getConnection("jdbc:odbc:MyDSN_256");
                    
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Desktops' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                        ResultSetMetaData rsMeta = rs.getMetaData();
                        rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                        int columnCount = rsMeta.getColumnCount();
                        DefaultTableModel tableModel = (DefaultTableModel) jTableDesktops.getModel();
                    
                        tableModel.setRowCount(0);
                        if(!rs.next())  {
                            JOptionPane.showMessageDialog(rootPane, "Product Not Found!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                            refreshTableTabs();
                            rs.close();
                        }
                        else    {
                            rs = st.executeQuery("Select product_id, product_brand, product_model, product_description, product_price, product_quantity_in_stock from Products where product_category='Desktops' and product_model LIKE '%" + txtSearchModel.getText() + "%' order by product_id");
                            rsMeta = rs.getMetaData();
                            rs.setFetchDirection(ResultSet.FETCH_FORWARD);
                            columnCount = rsMeta.getColumnCount();
                            tableModel = (DefaultTableModel) jTableDesktops.getModel();
                    
                            tableModel.setRowCount(0);
                            while(rs.next())    {
                                String[] conList = new String[columnCount];
                                for(int i = 1, j = 0; i <= columnCount; i++, j++)   {
                                    conList[j] = rs.getString(i);
                                }
                                tableModel.addRow(conList);
                            }
                            rs.close();
                        }
                        
                        st.close();
                        con.close();
                    
                    }
                    catch(ClassNotFoundException cnfe) {}
                    catch(SQLException sqle)    {} 
                }
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Enter Complete and Valid Values!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                    txtSearchBrand.requestFocus();
                }
                break;
        }
    }
    
    public void requestFocusOfTxtSearchBrand()  {
        txtSearchBrand.requestFocus();
    }
    
    
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        imagePanelLogo.setImage(new ImageIcon(this.getClass().getResource("\\..\\..\\Images\\Logos\\CSMS\\CSMS2 final logo Small.jpg")).getImage());
        repaint();
        
        try {
            this.setMaximum(true);
        }
        catch(java.beans.PropertyVetoException e)  {}
    }//GEN-LAST:event_formFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex;
        txtSearchBrand.setText("");
        txtSearchModel.setText("");
        
        switch(jTabbedPaneCategory.getSelectedIndex())  {
            case 0:
                selectedRowIndex = jTableMotherboards.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableMotherboards.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 1:
                selectedRowIndex = jTableProcessors.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableProcessors.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 2:
                selectedRowIndex = jTableProcessorHeatSinks.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableProcessorHeatSinks.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }                
                break;
                
            case 3:
                selectedRowIndex = jTableRAMs.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableRAMs.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 4:
                selectedRowIndex = jTableGraphicsCards.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableGraphicsCards.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 5:
                selectedRowIndex = jTableSoundCards.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableSoundCards.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 6:
                selectedRowIndex = jTableHardDiskDrives.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableHardDiskDrives.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 7:
                selectedRowIndex = jTableOpticalDrives.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableOpticalDrives.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 8:
                selectedRowIndex = jTablePSUs.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTablePSUs.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 9:
                selectedRowIndex = jTableChassis.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableChassis.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 10:
                selectedRowIndex = jTableMonitors.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableMonitors.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 11:
                selectedRowIndex = jTableKeyboards.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableKeyboards.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 12:
                selectedRowIndex = jTableMice.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableMice.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 13:
                selectedRowIndex = jTableHeadphones.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableHeadphones.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 14:
                selectedRowIndex = jTableSpeakers.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableSpeakers.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 15:
                selectedRowIndex = jTablePrinterAndInks.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTablePrinterAndInks.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 16:
                selectedRowIndex = jTableOtherAccessories.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableOtherAccessories.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
                
            case 17:
                selectedRowIndex = jTableLaptops.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableLaptops.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
            case 18:
                selectedRowIndex = jTableDesktops.getSelectedRow();
                if(selectedRowIndex != -1)  {
                    mdiObj.productStockOperationsObj.selectOperationsTab(Integer.parseInt((jTableDesktops.getModel().getValueAt(selectedRowIndex, 0)).toString()));
                    mdiObj.productStockOperationsObj.setVisible(false);
                    mdiObj.productStockOperationsObj.setVisible(true);
                    mdiObj.productStockOperationsObj.requestFocus();
                    this.setVisible(false);
                }     
                else    {
                    JOptionPane.showMessageDialog(rootPane, "Please Select a Product first!", "CSMS - Error" , JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        txtSearchBrand.setText("");
        txtSearchModel.setText("");
        refreshTableTabs();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        searchProduct();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtSearchModelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchModelFocusGained
        // TODO add your handling code here:
        txtSearchBrand.setText("");
    }//GEN-LAST:event_txtSearchModelFocusGained

    private void txtSearchBrandFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchBrandFocusGained
        // TODO add your handling code here:
        txtSearchModel.setText("");
    }//GEN-LAST:event_txtSearchBrandFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private coreCSMS.UI.ImagePanel imagePanelLogo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPaneCategory;
    private javax.swing.JTable jTableChassis;
    private javax.swing.JTable jTableDesktops;
    private javax.swing.JTable jTableGraphicsCards;
    private javax.swing.JTable jTableHardDiskDrives;
    private javax.swing.JTable jTableHeadphones;
    private javax.swing.JTable jTableKeyboards;
    private javax.swing.JTable jTableLaptops;
    private javax.swing.JTable jTableMice;
    private javax.swing.JTable jTableMonitors;
    private javax.swing.JTable jTableMotherboards;
    private javax.swing.JTable jTableOpticalDrives;
    private javax.swing.JTable jTableOtherAccessories;
    private javax.swing.JTable jTablePSUs;
    private javax.swing.JTable jTablePrinterAndInks;
    private javax.swing.JTable jTableProcessorHeatSinks;
    private javax.swing.JTable jTableProcessors;
    private javax.swing.JTable jTableRAMs;
    private javax.swing.JTable jTableSoundCards;
    private javax.swing.JTable jTableSpeakers;
    private javax.swing.JTextField txtSearchBrand;
    private javax.swing.JTextField txtSearchModel;
    // End of variables declaration//GEN-END:variables
}
